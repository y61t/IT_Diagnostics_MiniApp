const screen1 = document.getElementById("screen1");
const screen2 = document.getElementById("screen2");
const screen3 = document.getElementById("screen3");
const screen4 = document.getElementById("screen4");
const insightText = document.getElementById("insight-text");
const contactForm = document.getElementById("contact-form");
const formMessage = document.getElementById("form-message");

let selectedScenario = null;

const insights = {
  1: { text: "80% –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...", button: "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤¬ª" },
  2: { text: "70% –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—é—Ç—Å—è...", button: "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´5 –æ—à–∏–±–æ–∫¬ª" },
  3: { text: "7 –∏–∑ 10 –∫–æ–º–ø–∞–Ω–∏–π –≤—ã–±–∏—Ä–∞—é—Ç —Å–æ—Ñ—Ç...", button: "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´7 –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è¬ª" },
  4: { text: "–ü–æ–¥—Ä—è–¥—á–∏–∫ —Å—á–∏—Ç–∞–µ—Ç —á–∞—Å—ã...", button: "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´5 —Å–∏–≥–Ω–∞–ª–æ–≤¬ª" },
  5: { text: "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–ª–∏...", button: "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤¬ª" },
  6: { text: "ROI –Ω–∏–∫—Ç–æ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç...", button: "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´7 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤¬ª" },
};

function showMessage(text, color = "black") {
  formMessage.style.display = "block";
  formMessage.style.color = color;
  formMessage.innerText = text;
}

// === –°—Ü–µ–Ω–∞—Ä–∏–∏ ===
document.querySelectorAll("#scenario-buttons button").forEach(btn => {
  btn.addEventListener("click", () => {
    selectedScenario = btn.dataset.scenario;
    insightText.innerText = insights[selectedScenario].text;
    document.getElementById("next-contact").innerText = insights[selectedScenario].button;
    screen1.classList.add("hidden");
    screen2.classList.remove("hidden");
  });
});

document.getElementById("next-contact").addEventListener("click", () => {
  screen2.classList.add("hidden");
  screen3.classList.remove("hidden");
});

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ===
contactForm.addEventListener("submit", async e => {
  e.preventDefault();

  const name = contactForm.querySelector("input[name='name']").value.trim();
  const email = contactForm.querySelector("input[name='email']").value.trim();

  if (!name || !email) return showMessage("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.", "red");

  // –ü–æ–ª—É—á–∞–µ–º user.id –∏–∑ Telegram WebApp
  const webappUserId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || null;
  console.log("webappUserId:", webappUserId);

  const payload = {
    name,
    email,
    scenario: selectedScenario,
    telegram_user_id: webappUserId,
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:", payload);

  try {
    const resp = await fetch("/submit", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    const result = await resp.json();
    console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

    if (resp.ok && result.status === "ok") {
      showMessage("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!", "green");
      setTimeout(() => {
        screen3.classList.add("hidden");
        screen4.classList.remove("hidden");
      }, 1200);
    } else {
      showMessage(result.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.", "red");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞:", err);
    showMessage("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "red");
  }
});
