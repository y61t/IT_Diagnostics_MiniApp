// ---------- config ----------
const BOT_USERNAME = "IT_DiagnosticsBot"; // <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä: my_bot
// -----------------------------

const screen1 = document.getElementById("screen1");
const screen2 = document.getElementById("screen2");
const screen3 = document.getElementById("screen3");
const screen4 = document.getElementById("screen4");
const insightText = document.getElementById("insight-text");
const contactForm = document.getElementById("contact-form");
const formMessage = document.getElementById("form-message");

// optional container in index.html for Telegram Login Widget
// <div id="tg-login"></div>
const tgLoginContainerId = "tg-login";

let selectedScenario = null;
let telegramAuth = null; // will store Telegram Login Widget result if user auths

// Minimal insights (same as before)
const insights = {
  1: { text: "<ul><li>80% –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...</li></ul>", button: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤¬ª' },
  2: { text: "<ul><li>70% –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—é—Ç—Å—è...</li></ul>", button: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´5 –æ—à–∏–±–æ–∫¬ª' },
  3: { text: "<ul><li>7 –∏–∑ 10 –∫–æ–º–ø–∞–Ω–∏–π –≤—ã–±–∏—Ä–∞—é—Ç —Å–æ—Ñ—Ç...</li></ul>", button: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´7 –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è¬ª' },
  4: { text: "<ul><li>–ü–æ–¥—Ä—è–¥—á–∏–∫ —Å—á–∏—Ç–∞–µ—Ç —á–∞—Å—ã...</li></ul>", button: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´5 —Å–∏–≥–Ω–∞–ª–æ–≤¬ª' },
  5: { text: "<ul><li>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–ª–∏...</li></ul>", button: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤¬ª' },
  6: { text: "<ul><li>ROI –Ω–∏–∫—Ç–æ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç...</li></ul>", button: '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´7 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤¬ª' }
};

// Validation
function validateEmail(email) {
  return /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/.test(email);
}
function validateName(name) {
  return /^[–ê-–Ø–∞-—èA-Za-z–Å—ë\s-]+$/.test(name) && name.length >= 2;
}

// UI helpers
function showError(message, field = null) {
  console.log("‚ùå –û—à–∏–±–∫–∞:", message);
  formMessage.innerText = message;
  formMessage.style.color = "red";
  formMessage.style.display = "block";
  if (field) field.classList.add("error");
}
function clearError(field = null) {
  formMessage.innerText = "";
  formMessage.style.display = "none";
  if (field) field.classList.remove("error");
}
function showSuccess(message) {
  console.log("‚úÖ –£—Å–ø–µ—Ö:", message);
  formMessage.innerText = message;
  formMessage.style.color = "green";
  formMessage.style.display = "block";
}

// Render Telegram Login Widget (if container exists)
function renderTelegramLoginWidget() {
  const container = document.getElementById(tgLoginContainerId);
  if (!container) return;
  // Remove existing widget script if any
  container.innerHTML = "";
  // Create widget script tag
  const script = document.createElement("script");
  script.src = "https://telegram.org/js/telegram-widget.js?15";
  script.setAttribute("data-telegram-login", BOT_USERNAME);
  script.setAttribute("data-size", "medium");
  script.setAttribute("data-userpic", "false");
  script.setAttribute("data-request-access", "write");
  script.setAttribute("data-onauth", "onTelegramAuth");
  script.async = true;
  container.appendChild(script);
  console.log("üî∏ Telegram Login Widget rendered (replace BOT_USERNAME in script.js if needed)");
}

// Callback invoked by Telegram Login Widget
window.onTelegramAuth = function(user) {
  console.log("üîê onTelegramAuth:", user);
  // user contains id, first_name, last_name (opt), username (opt), photo_url (opt), auth_date, hash
  telegramAuth = user;
  showSuccess("–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞.");
};

// Try to render widget on load (if user added <div id="tg-login"></div>)
document.addEventListener("DOMContentLoaded", () => {
  renderTelegramLoginWidget();
});

// Scenario buttons
document.querySelectorAll("#scenario-buttons button").forEach(btn => {
  btn.addEventListener("click", () => {
    selectedScenario = btn.dataset.scenario;
    console.log("–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π:", selectedScenario);
    insightText.innerHTML = insights[selectedScenario].text;
    document.getElementById("next-contact").textContent = insights[selectedScenario].button;
    screen1.classList.add("hidden");
    screen2.classList.remove("hidden");
  });
});

// Next -> show form
document.getElementById("next-contact").addEventListener("click", () => {
  console.log("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
  screen2.classList.add("hidden");
  screen3.classList.remove("hidden");
});

// Submit handler
contactForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  const nameField = contactForm.querySelector("input[name='name']");
  const emailField = contactForm.querySelector("input[name='email']");
  const telegramField = contactForm.querySelector("input[name='telegram']");

  clearError(nameField);
  clearError(emailField);

  const name = nameField.value.trim();
  const email = emailField.value.trim();
  const telegramText = telegramField ? telegramField.value.trim() : "";

  if (!name) return showError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è.", nameField);
  if (!validateName(name)) return showError("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã –∏ –±–µ–∑ —Ü–∏—Ñ—Ä.", nameField);
  if (!email) return showError("–í–≤–µ–¥–∏—Ç–µ email.", emailField);
  if (!validateEmail(email)) return showError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", emailField);

  // 1) If Telegram WebApp inside Telegram, we can get user.id:
  const webappUserId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || null;
  console.log("webappUserId:", webappUserId);

  // 2) telegramAuth from Login Widget (if used)
  console.log("telegramAuth (widget):", telegramAuth);

  const payload = {
    name,
    email,
    telegram: telegramText,
    scenario: selectedScenario,
    // include both possibilities; server will pick verified one in order
    telegram_user_id: webappUserId || null,
    telegram_auth: telegramAuth || null
  };

  console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload:", payload);

  try {
    const resp = await fetch("/submit", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    const result = await resp.json();
    console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

    if (resp.ok && result.status === "ok") {
      showSuccess("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram (–µ—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à Telegram).");
      contactForm.reset();
      setTimeout(() => {
        screen3.classList.add("hidden");
        screen4.classList.remove("hidden");
      }, 1000);
    } else {
      showError(result.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ fetch:", err);
    showError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});
