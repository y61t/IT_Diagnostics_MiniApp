import os
from dotenv import load_dotenv
import re
import httpx

from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Message, InputFile
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties

# === Load env ===
load_dotenv()
REQUIRED_ENVS = ["TELEGRAM_TOKEN", "RAILWAY_URL", "BITRIX_WEBHOOK_URL"]
for var in REQUIRED_ENVS:
    if not os.getenv(var):
        raise RuntimeError(f"‚ùå Env –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –∑–∞–¥–∞–Ω–∞!")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_URL")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")

# === FastAPI ===
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

EMAIL_REGEX = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")

# === –°—Ç–∞—Ç–∏–∫–∞ ===
@app.get("/")
def index():
    return FileResponse("webapp/index.html")


@app.get("/style.css")
def css():
    return FileResponse("webapp/style.css")


@app.get("/script.js")
def js():
    return FileResponse("webapp/script.js")

# === –°—Ü–µ–Ω–∞—Ä–∏–∏ ‚Üí –∫–∞—Ä—Ç–∏–Ω–∫–∏ ===
scenario_images = {
    "1": ["webapp/images/1.png"],
    "2": ["webapp/images/2.png"],
    "3": ["webapp/images/3.png"],
    "4": ["webapp/images/4.png"],
    "5": ["webapp/images/5.png"],
    "6": ["webapp/images/6.png"],
}

# === Telegram Bot ===
default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_TOKEN, default=default_properties)
dp = Dispatcher(bot=bot)


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é ===
async def send_scenario_image(chat_id: int, scenario_id: str):
    images = scenario_images.get(scenario_id, [])
    for img_path in images:
        photo = InputFile(img_path)
        await bot.send_photo(chat_id=chat_id, photo=photo, caption="–í–∞—à —á–µ–∫-–ª–∏—Å—Ç –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é")


# === Submit —Ñ–æ—Ä–º—ã ===
@app.post("/submit")
async def submit_contact(request: Request):
    data = await request.json()
    name = data.get("name", "").strip()
    email = data.get("email", "").strip()
    telegram_user_id = data.get("telegram_user_id")  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ user.id
    scenario_id = str(data.get("scenario", "")).strip()

    if not name:
        return JSONResponse({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è."}, status_code=400)
    if not email or not EMAIL_REGEX.match(email):
        return JSONResponse({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."}, status_code=400)

    scenario_texts = {
        "1": "–ü—Ä–æ–µ–∫—Ç –≤ –∫—Ä–∏–∑–∏—Å–µ",
        "2": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–¢-–ø—Ä–æ–µ–∫—Ç–∞",
        "3": "–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
        "4": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –∏ –∫–æ–º–∞–Ω–¥—ã",
        "5": "–¶–∏—Ñ—Ä–æ–≤–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞",
        "6": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ (CFO)"
    }
    scenario = scenario_texts.get(scenario_id, "–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π")

    payload = {
        "fields": {
            "TITLE": f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ò–¢-—Ä–∏—Å–∫–æ–≤ ‚Äî {scenario}",
            "NAME": name,
            "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}],
            "PHONE": [],  # –±–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            "COMMENTS": f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\nEmail: {email}",
            "SOURCE_ID": "WEB",
        },
        "params": {"REGISTER_SONET_EVENT": "Y"}
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Bitrix
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.post(BITRIX_WEBHOOK_URL, json=payload)
            result = r.json()

        if "error" in result:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ Bitrix:", result)
            return JSONResponse({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥."}, status_code=400)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Telegram
        if telegram_user_id:
            await send_scenario_image(int(telegram_user_id), scenario_id)

        return JSONResponse({"status": "ok", "lead_id": result.get("result")})

    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Bitrix:", e)
        return JSONResponse({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CRM."}, status_code=500)


# === Telegram Bot /start + WebApp –∫–Ω–æ–ø–∫–∞ ===
@dp.message(Command("start"))
async def start(message: Message):
    button = KeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤",
        web_app=WebAppInfo(url=RAILWAY_URL)
    )
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤:",
        reply_markup=keyboard
    )


# === Webhook –¥–ª—è Telegram ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{RAILWAY_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(url=webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")


# === –ó–∞–ø—É—Å–∫ FastAPI ===
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
