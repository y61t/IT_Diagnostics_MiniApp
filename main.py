import os
from dotenv import load_dotenv
import re
import httpx

from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
REQUIRED_ENVS = ["TELEGRAM_TOKEN", "RAILWAY_URL", "BITRIX_WEBHOOK_URL"]
for var in REQUIRED_ENVS:
    if not os.getenv(var):
        raise RuntimeError(f"‚ùå Env –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –∑–∞–¥–∞–Ω–∞!")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_URL")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
PDF_PATH = os.getenv("PDF_PATH", "webapp/pdf/checklist.pdf")

# === FastAPI ===
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

EMAIL_REGEX = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")

# === –°—Ç–∞—Ç–∏–∫–∞ ===
@app.get("/")
def index():
    return FileResponse("webapp/index.html")


@app.get("/style.css")
def css():
    return FileResponse("webapp/style.css")


@app.get("/script.js")
def js():
    return FileResponse("webapp/script.js")


# === Submit —Ñ–æ—Ä–º—ã ===
@app.post("/submit")
async def submit_contact(request: Request):
    data = await request.json()
    name = data.get("name", "").strip()
    email = data.get("email", "").strip()
    telegram = data.get("telegram", "").strip()
    scenario_id = str(data.get("scenario", "")).strip()

    if not name:
        return JSONResponse({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è."}, status_code=400)
    if not email or not EMAIL_REGEX.match(email):
        return JSONResponse({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."}, status_code=400)

    scenario_texts = {
        "1": "–ü—Ä–æ–µ–∫—Ç –≤ –∫—Ä–∏–∑–∏—Å–µ",
        "2": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–¢-–ø—Ä–æ–µ–∫—Ç–∞",
        "3": "–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
        "4": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –∏ –∫–æ–º–∞–Ω–¥—ã",
        "5": "–¶–∏—Ñ—Ä–æ–≤–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞",
        "6": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ (CFO)"
    }
    scenario = scenario_texts.get(scenario_id, "–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π")

    payload = {
        "fields": {
            "TITLE": f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ò–¢-—Ä–∏—Å–∫–æ–≤ ‚Äî {scenario}",
            "NAME": name,
            "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}],
            "PHONE": [{"VALUE": telegram, "VALUE_TYPE": "WORK"}] if telegram else [],
            "COMMENTS": f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\nTelegram/Phone: {telegram or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nEmail: {email}",
            "SOURCE_ID": "WEB",
        },
        "params": {"REGISTER_SONET_EVENT": "Y"}
    }

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.post(BITRIX_WEBHOOK_URL, json=payload)
            result = r.json()

        if "error" in result:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ Bitrix:", result)
            return JSONResponse({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥."}, status_code=400)

        return JSONResponse({"status": "ok", "lead_id": result.get("result"), "pdf_url": "/download"})

    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Bitrix:", e)
        return JSONResponse({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CRM."}, status_code=500)


# === –°–∫–∞—á–∞—Ç—å PDF ===
@app.get("/download")
def download_pdf():
    return FileResponse(PDF_PATH, media_type="application/pdf", filename="checklist.pdf")


# === Telegram Bot —á–µ—Ä–µ–∑ Webhook ===
default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_TOKEN, default=default_properties)
dp = Dispatcher(bot=bot)  # ‚úÖ –ø—Ä–∏–≤—è–∑–∫–∞ –±–æ—Ç–∞ –∫ Dispatcher

@dp.message(Command("start"))
async def start(message: Message):
    button = KeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤", web_app=WebAppInfo(url=RAILWAY_URL))
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤:", reply_markup=keyboard)


# === Webhook –¥–ª—è Telegram ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(update)  # ‚úÖ aiogram 3.x
    return JSONResponse({"ok": True})


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{RAILWAY_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(url=webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")


# === –ó–∞–ø—É—Å–∫ FastAPI ===
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
