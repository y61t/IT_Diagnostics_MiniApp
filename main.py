import logging
import os
from dotenv import load_dotenv
import re
import aiohttp
from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.types.input_file import FSInputFile

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
REQUIRED_ENVS = ["TELEGRAM_TOKEN", "RAILWAY_URL", "BITRIX_WEBHOOK_URL"]
for var in REQUIRED_ENVS:
    if not os.getenv(var):
        raise RuntimeError(f"‚ùå Env –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –∑–∞–¥–∞–Ω–∞!")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_URL")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")

# === FastAPI ===
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

EMAIL_REGEX = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")

# === –°—Ç–∞—Ç–∏–∫–∞ ===
@app.get("/")
def index():
    return FileResponse("webapp/index.html")


@app.get("/style.css")
def css():
    return FileResponse("webapp/style.css")


@app.get("/script.js")
def js():
    return FileResponse("webapp/script.js")


# === Submit —Ñ–æ—Ä–º—ã ===
@app.post("/submit")
async def submit_form(request: Request):
    data = await request.json()
    name = data.get("name")
    email = data.get("email")
    telegram = data.get("telegram")
    scenario = data.get("scenario")
    user_id = data.get("user_id")

    logger.info(f"/submit –ø–æ–ª—É—á–µ–Ω: name={name}, email={email}, telegram={telegram}, scenario={scenario}, user_id={user_id}")

    # --- 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Bitrix ---
    bitrix_payload = {
        "fields": {
            "TITLE": f"IT –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî {name}",
            "NAME": name,
            "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}],
            "COMMENTS": f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\nTelegram: {telegram}",
        },
        "params": {"REGISTER_SONET_EVENT": "Y"}
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(BITRIX_WEBHOOK_URL, json=bitrix_payload) as resp:
                logger.info(f"–õ–∏–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Bitrix, status={resp.status}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix: {e}")

    # --- 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
    if user_id:
        try:
            main_img_path = "webapp/images/main.png"
            scenario_img_path = f"webapp/images/{scenario}.png"

            if not os.path.exists(main_img_path):
                logger.warning(f"main.png –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {main_img_path}")
            if not os.path.exists(scenario_img_path):
                logger.warning(f"—Å—Ü–µ–Ω–∞—Ä–∏–π {scenario}.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1.png")
                scenario_img_path = "webapp/images/1.png"

            main_img = FSInputFile(main_img_path)
            scenario_img = FSInputFile(scenario_img_path)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ main.png –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario}.png –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            await bot.send_photo(chat_id=int(user_id), photo=main_img, caption="üìã –í–∞—à —á–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤!")
            await bot.send_photo(chat_id=int(user_id), photo=scenario_img, caption=f"üß© –í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")

            logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        logger.warning("user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    return JSONResponse({"status": "ok"})


# === Telegram Bot ===
default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_TOKEN, default=default_properties)
dp = Dispatcher(bot=bot)


@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    webapp_url = f"{RAILWAY_URL}?user_id={user_id}"
    button = KeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤", web_app=WebAppInfo(url=webapp_url))
    logger.info(f"{button}")
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤:", reply_markup=keyboard)


# === Webhook –¥–ª—è Telegram ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})


@app.on_event("startup")
async def on_startup():
    webhook_url = f"{RAILWAY_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")


if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
