import os
import logging
from dotenv import load_dotenv
import re
import httpx
import hmac
import hashlib
import urllib.parse
import json

from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ user_id
user_chat_map = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
REQUIRED_ENVS = ["TELEGRAM_TOKEN", "RAILWAY_URL", "BITRIX_WEBHOOK_URL"]
for var in REQUIRED_ENVS:
    if not os.getenv(var):
        raise RuntimeError(f"‚ùå Env –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –∑–∞–¥–∞–Ω–∞!")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_URL")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_TOKEN, default=default_properties)
dp = Dispatcher(bot=bot)

# === FastAPI ===
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

EMAIL_REGEX = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")

# Health-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
@app.get("/health")
async def health_check():
    logger.info("Health check requested")
    return JSONResponse({"status": "healthy"})

# –í–∞–ª–∏–¥–∞—Ü–∏—è init_data –æ—Ç Telegram
def validate_init_data(init_data_str: str) -> dict:
    params = dict(urllib.parse.parse_qsl(init_data_str))
    received_hash = params.pop('hash', None)
    data_check_string = '\n'.join(f"{k}={v}" for k, v in sorted(params.items()))
    secret_key = hashlib.sha256(TELEGRAM_TOKEN.encode()).digest()
    calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
    if calculated_hash == received_hash:
        user = json.loads(params['user'])
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è init_data. User ID: {user['id']}")
        return user
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ init_data. Received hash: {received_hash}, Calculated hash: {calculated_hash}")
        raise ValueError("Invalid init_data hash")

# === –°—Ç–∞—Ç–∏–∫–∞ ===
@app.get("/")
def index():
    logger.info("Serving index.html")
    return FileResponse("webapp/index.html")

@app.get("/style.css")
def css():
    logger.info("Serving style.css")
    return FileResponse("webapp/style.css")

@app.get("/script.js")
def js():
    logger.info("Serving script.js")
    return FileResponse("webapp/script.js")

# === Submit —Ñ–æ—Ä–º—ã ===
@app.post("/submit")
async def submit_contact(request: Request, background_tasks: BackgroundTasks):
    data = await request.json()
    name = data.get("name", "").strip()
    email = data.get("email", "").strip()
    telegram = data.get("telegram", "").strip()
    scenario_id = str(data.get("scenario", "")).strip()
    init_data = data.get("init_data", "")

    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: name={name}, email={email}, telegram={telegram}, scenario={scenario_id}, init_data={init_data}")

    if not name:
        return JSONResponse({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è."}, status_code=400)
    if not email or not EMAIL_REGEX.match(email):
        return JSONResponse({"status": "error", "message": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."}, status_code=400)

    scenario_texts = {
        "1": "–ü—Ä–æ–µ–∫—Ç –≤ –∫—Ä–∏–∑–∏—Å–µ",
        "2": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–¢-–ø—Ä–æ–µ–∫—Ç–∞",
        "3": "–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
        "4": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –∏ –∫–æ–º–∞–Ω–¥—ã",
        "5": "–¶–∏—Ñ—Ä–æ–≤–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞",
        "6": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ (CFO)"
    }
    scenario = scenario_texts.get(scenario_id, "–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π")

    payload = {
        "fields": {
            "TITLE": f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ò–¢-—Ä–∏—Å–∫–æ–≤ ‚Äî {scenario}",
            "NAME": name,
            "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}],
            "PHONE": [{"VALUE": telegram, "VALUE_TYPE": "WORK"}] if telegram else [],
            "COMMENTS": f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\nTelegram/Phone: {telegram or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nEmail: {email}",
            "SOURCE_ID": "WEB",
        },
        "params": {"REGISTER_SONET_EVENT": "Y"}
    }

    user_id = None
    chat_id = None
    if init_data:
        try:
            user = validate_init_data(init_data)
            user_id = user['id']
            chat_id = user_chat_map.get(user_id, user_id)
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ init_data: {str(e)}")
    else:
        logger.warning("init_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π chat_id")
        for uid, cid in user_chat_map.items():
            if uid == 8100687321:  # –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞, –ø–æ—Ç–æ–º –¥–æ—Ä–∞–±–æ—Ç–∞–µ–º
                chat_id = cid
                user_id = uid
                break

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.post(BITRIX_WEBHOOK_URL, json=payload)
            result = r.json()

        if "error" in result:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Bitrix: {result}")
            return JSONResponse({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥."}, status_code=400)

        if chat_id:
            background_tasks.add_task(send_telegram_photos, chat_id, scenario_id)

        return JSONResponse({"status": "ok", "lead_id": result.get("result")})

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return JSONResponse({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CRM."}, status_code=500)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram
async def send_telegram_photos(chat_id: int, scenario_id: str):
    try:
        main_photo_path = "webapp/images/main.png"
        scenario_photo_path = f"webapp/images/{scenario_id}.png"

        if os.path.exists(main_photo_path):
            await bot.send_photo(chat_id=chat_id, photo=types.FSInputFile(main_photo_path))
            logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è chat_id={chat_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–æ—Ç–æ main.png –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è chat_id={chat_id}")

        if os.path.exists(scenario_photo_path):
            await bot.send_photo(
                chat_id=chat_id,
                photo=types.FSInputFile(scenario_photo_path),
                caption=f"–í–æ—Ç –æ–±—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüî• –ù–∞—à –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è‚úçÔ∏è"
            )
            logger.info(f"‚úÖ –§–æ—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è chat_id={chat_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–æ—Ç–æ {scenario_id}.png –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è chat_id={chat_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {str(e)}")

# === Telegram Bot —á–µ—Ä–µ–∑ Webhook ===
@dp.message(Command("start"))
async def start(message: types.Message):
    button = KeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤", web_app=WebAppInfo(url=RAILWAY_URL))
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É IT-—Ä–∏—Å–∫–æ–≤:", reply_markup=keyboard)
    user_chat_map[message.from_user.id] = message.chat.id
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω chat_id {message.chat.id} –¥–ª—è user_id {message.from_user.id}")

# === Webhook –¥–ª—è Telegram ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    if 'message' in body and 'from' in body['message'] and 'chat' in body['message']:
        user_id = body['message']['from']['id']
        chat_id = body['message']['chat']['id']
        user_chat_map[user_id] = chat_id
        logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω chat_id {chat_id} –¥–ª—è user_id {user_id}")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {body}")
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ===
@app.on_event("startup")
async def on_startup():
    port = os.getenv("PORT", "8000")
    logger.info(f"üöÄ Server starting on port {port}")
    webhook_url = f"{RAILWAY_URL}/webhook"
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")
    except TelegramBadRequest as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RAILWAY_URL.")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")