import os
import re
import httpx
from dotenv import load_dotenv

from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Message, InputFile
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties

# === Load environment ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
RAILWAY_URL = os.getenv("RAILWAY_URL")

if not TELEGRAM_TOKEN or not BITRIX_WEBHOOK_URL or not RAILWAY_URL:
    raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å .env")

# === FastAPI ===
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)

EMAIL_REGEX = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")

# === Static ===
@app.get("/")
def index():
    return FileResponse("webapp/index.html")

@app.get("/style.css")
def css():
    return FileResponse("webapp/style.css")

@app.get("/script.js")
def js():
    return FileResponse("webapp/script.js")

# === Scenarios & Images ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
scenario_images = {
    "1": [os.path.join(BASE_DIR, "webapp/images/1.png")],
    "2": [os.path.join(BASE_DIR, "webapp/images/2.png")],
    "3": [os.path.join(BASE_DIR, "webapp/images/3.png")],
    "4": [os.path.join(BASE_DIR, "webapp/images/4.png")],
    "5": [os.path.join(BASE_DIR, "webapp/images/5.png")],
    "6": [os.path.join(BASE_DIR, "webapp/images/6.png")],
}

# === Telegram Bot ===
default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_TOKEN, default=default_properties)
dp = Dispatcher()

async def send_scenario_image(chat_id: int, scenario_id: str):
    print(f"üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} (—Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id})")
    images = scenario_images.get(scenario_id, [])
    if not images:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è:", scenario_id)
        return
    for img_path in images:
        if not os.path.exists(img_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {img_path}")
            continue
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {img_path}")
        await bot.send_photo(chat_id=chat_id, photo=InputFile(img_path), caption="–í–∞—à —á–µ–∫-–ª–∏—Å—Ç –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é")

# === Form submit ===
@app.post("/submit")
async def submit_contact(request: Request):
    data = await request.json()
    print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", data)

    name = data.get("name", "").strip()
    email = data.get("email", "").strip()
    telegram_user_id = data.get("telegram_user_id")
    scenario_id = str(data.get("scenario", "")).strip()

    if not name or not email or not EMAIL_REGEX.match(email):
        return JSONResponse({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}, status_code=400)

    try:
        # === –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Bitrix ===
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Bitrix...")
        payload = {
            "fields": {
                "TITLE": f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ IT-—Ä–∏—Å–∫–æ–≤ ‚Äî {scenario_id}",
                "NAME": name,
                "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}],
                "COMMENTS": f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_id}"
            },
            "params": {"REGISTER_SONET_EVENT": "Y"}
        }
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.post(BITRIX_WEBHOOK_URL, json=payload)
            result = r.json()
        print("üìå Bitrix –æ—Ç–≤–µ—Ç:", result)

        # === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
        if telegram_user_id:
            await send_scenario_image(int(telegram_user_id), scenario_id)
        else:
            print("‚ùå Telegram user_id –Ω–µ —É–∫–∞–∑–∞–Ω")

        return JSONResponse({"status": "ok", "lead_id": result.get("result")})
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ submit:", e)
        return JSONResponse({"status": "error", "message": "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"}, status_code=500)

# === Telegram /start ===
@dp.message(Command("start"))
async def start(message: Message):
    button = KeyboardButton(text="üöÄ –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", web_app=WebAppInfo(url=RAILWAY_URL))
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:", reply_markup=keyboard)

# === Telegram webhook ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})

# === Startup: set webhook ===
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{RAILWAY_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(url=webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

# === Run ===
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
